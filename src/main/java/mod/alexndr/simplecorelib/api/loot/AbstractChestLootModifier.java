package mod.alexndr.simplecorelib.api.loot;

import com.mojang.serialization.MapCodec;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import it.unimi.dsi.fastutil.objects.ObjectArrayList;
import mod.alexndr.simplecorelib.loot.ChestLootModifier;
import net.minecraft.core.registries.Registries;
import net.minecraft.resources.ResourceKey;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.storage.loot.LootContext;
import net.minecraft.world.level.storage.loot.LootTable;
import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
import net.neoforged.neoforge.common.loot.IGlobalLootModifier;
import net.neoforged.neoforge.common.loot.LootModifier;
import org.jetbrains.annotations.NotNull;

public abstract class AbstractChestLootModifier extends LootModifier
{
    protected final ResourceKey<LootTable> lootTable;

    public AbstractChestLootModifier(LootItemCondition[] conditionsIn, ResourceKey<LootTable> lootTable)
    {
        super(conditionsIn);
        this.lootTable = lootTable;
    }

    /**
     * Applies the modifier to the generated loot (all loot conditions have already been checked
     * and have returned true).
     *
     * @param generatedLoot the list of ItemStacks that will be dropped, generated by loot tables
     * @param context       the LootContext, identical to what is passed to loot tables
     * @return modified loot drops
     */
    @SuppressWarnings("deprecation")
    @Override
    @NotNull
    protected ObjectArrayList<ItemStack> doApply(@NotNull ObjectArrayList<ItemStack> generatedLoot,
                                                 LootContext context)
    {
        // 1.20.6/1.21.1 version
        context.getResolver().get(Registries.LOOT_TABLE, this.lootTable)
                .ifPresent(extraTable -> {
                    extraTable.value().getRandomItemsRaw(context,
                            LootTable.createStackSplitter(context.getLevel(), generatedLoot::add));
                });
        return generatedLoot;
    }

    @Override @NotNull
    public abstract MapCodec<? extends IGlobalLootModifier> codec();
}
