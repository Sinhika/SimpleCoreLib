package mod.alexndr.simplecorelib.loot;

import com.mojang.serialization.MapCodec;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import it.unimi.dsi.fastutil.objects.ObjectArrayList;
import mod.alexndr.simplecorelib.init.ModCodecs;
import net.minecraft.core.registries.Registries;
import net.minecraft.resources.ResourceKey;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.storage.loot.LootContext;
import net.minecraft.world.level.storage.loot.LootTable;
import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
import net.neoforged.neoforge.common.loot.IGlobalLootModifier;
import net.neoforged.neoforge.common.loot.LootModifier;

/**
 * net.neoforged.neoforge.common.loot.AddTableLootModifier and NeoForgeMod. ADD_TABLE_LOOT_MODIFIER_TYPE.
 *
 */
public class ChestLootModifier extends LootModifier
{
    public static final MapCodec<ChestLootModifier> CODEC =
            RecordCodecBuilder.mapCodec(inst -> LootModifier.codecStart(inst)
                            .and(ResourceKey.codec(Registries.LOOT_TABLE).fieldOf("lootTable")
                                    .forGetter((m) -> m.lootTable))
                            .apply(inst, ChestLootModifier::new));

    private final ResourceKey<LootTable> lootTable;
    //private final ResourceLocation lootTable;

    public ChestLootModifier(LootItemCondition[] conditionsIn, ResourceKey<LootTable> lootTable)
    {
        super(conditionsIn);
        this.lootTable = lootTable;
    }

    /**
     * Applies the modifier to the generated loot (all loot conditions have already been checked
     * and have returned true).
     *
     * @param generatedLoot the list of ItemStacks that will be dropped, generated by loot tables
     * @param context       the LootContext, identical to what is passed to loot tables
     * @return modified loot drops
     */
    @Override protected ObjectArrayList<ItemStack> doApply(ObjectArrayList<ItemStack> generatedLoot,
                                                           LootContext context)
    {
        // 1.21.1 version?
        context.getResolver().get(Registries.LOOT_TABLE, this.lootTable)
                .ifPresent(extraTable -> {
                    extraTable.value().getRandomItemsRaw(context,
                            LootTable.createStackSplitter(context.getLevel(), generatedLoot::add));
        });
        return generatedLoot;
    }

    /**
     * Returns the registered codec for this modifier
     */
    @Override
    public MapCodec<? extends IGlobalLootModifier> codec()
    {
        return ModCodecs.CHEST_LOOT.get();
    }
} // end class
